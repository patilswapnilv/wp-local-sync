---
description: Project rules for wp-local-sync
globs: 
---
# Your rule content

1. Project Overview
Purpose:
WP Local Sync is a WordPress plugin designed to securely synchronize local development environments with staging and production servers.
Core Functionality:
Environment management (Local, Staging, Production)
Secure file transfers via SFTP/SSH
Database and file system backup with rotation
Environment-specific configurations
Secure authentication using WordPress Application Passwords
Progress tracking for long operations
Rate limiting and detailed error logging

2. Feature and Requirement Specifications
Features:
Ensure the implementation of all listed features:

Environment setup and management
Secure SFTP/SSH file transfers
Database backup and restoration
File system backup with configurable retention and rotation
Environment-specific configuration handling
Authentication via Application Passwords
Progress tracking and rate limiting for operations
Detailed logging and monitoring of errors
Requirements:
The project must meet the following prerequisites:

PHP 7.4 or higher, WordPress 5.6 or higher
Remote SSH/SFTP access and MySQL/MariaDB database
Required PHP extensions: ZIP, OpenSSL, JSON, PDO, MySQLi

3. Development Environment and Setup
Installation Process:

Clone the repository into wp-content/plugins/
Install Composer dependencies with the --no-dev flag for production readiness
Set file and directory permissions to secure defaults (directories: 755, files: 644)
Activate the plugin via the WordPress Admin interface
Configuration:

Provide a clear process for adding and managing environments through the admin dashboard
Define required configuration fields (environment name, host, SSH user, SSH key path/password, etc.)

4. Code Structure and Standards
Directory Structure:
Follow a clear and modular structure:

graphql
Copy
wp-local-sync/
├── assets/         # CSS and JavaScript for admin interfaces
├── includes/       # Core PHP classes (Environment Manager, Backup Manager, Error Handler, etc.)
├── templates/      # Admin page templates
├── tests/          # Unit tests and test cases
├── vendor/         # Composer dependencies
├── composer.json   # Dependency configuration
├── install.sh      # Automated installation script
├── README.md       # Project documentation
└── wp-local-sync.php  # Main plugin file
Coding Guidelines:

Use modern PHP practices (e.g., strict typing, typed properties, arrow functions)
Adhere to WordPress PHP Coding Standards (proper indentation, naming conventions, inline documentation)
Favor object-oriented design for modularity and reusability
Structure code to leverage WordPress hooks (actions and filters) instead of core modifications

5. API and Authentication Standards
API Usage:
All API endpoints should require proper WordPress authentication using Application Passwords.
Document endpoints clearly with expected request/response formats.
Security Measures:
Validate and sanitize all inputs for API endpoints.
Use HTTPS for secure communication and enforce strong authentication protocols.

6. Debugging, Testing, and Logging
Debugging:

Enable WP_DEBUG and WP_DEBUG_LOG in development environments.
Use a custom debug constant (e.g., WLS_DEBUG) to control plugin-specific logging.
Document log file locations for both WordPress (/wp-content/debug.log) and plugin-specific logs (e.g., /wp-content/wls-logs/error.log).
Testing:

Write unit tests for critical components (e.g., Environment Manager, Backup Manager)
Use Composer scripts (e.g., composer test) to run tests as part of the development workflow.

7. Versioning and Release Management
Version History:

Maintain a clear changelog documenting version releases, dates, and key changes.
Increment version numbers for each release following semantic versioning principles.
Release Guidelines:

Ensure that each release includes complete feature sets (or proper beta labeling)
Include backup, rate limiting, and logging features in all releases

8. Contributing Guidelines
Code Contributions:
Fork the repository and create feature branches for new changes.
Follow commit message conventions and include detailed descriptions.
Submit Pull Requests with clear explanations of changes.
Development Workflow:
Clone the repository, install dependencies, and run all tests before committing.
Maintain code quality by adhering to established coding standards.

9. Support and Issue Tracking
Support Protocol:
Direct users to the project’s documentation wiki for setup and configuration help.
Encourage users to search existing issues or create new ones with detailed information (WordPress version, PHP version, logs, reproduction steps).
Feedback Loop:
Regularly monitor and address issues from the repository’s issue tracker.
Use detailed error logs to facilitate troubleshooting.

10. Licensing and Acknowledgments
License:
This project is licensed under the GPL v2 or later. Ensure all contributions comply with GPL requirements.
Acknowledgments:
Credit the WordPress Plugin Development Team, all contributors, and the broader open source community.

